
const Init_State=[
    0 ,0 ,0 ,0 ,0 ,0, 0 ,0 ,0 ,0,
    0 ,0, 0, 0, 1 ,0 ,0 ,0 ,0 ,0,
    0 ,0 ,0 ,1 ,1 ,1 ,0 ,0 ,0 ,0,
    0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0,
    0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0,
    0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0,
    0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0,
    0 ,0 ,0 ,1 ,1 ,1 ,1 ,0 ,0 ,0,
    0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0,
    0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0];
//forEach메소드를 이용해서 Init_state배열의 Index,Value값을 순차적으로 불러와 save_index의 저장.
//저장된 Index,Value 기준으로 상하 위치는 기준Index에서 상:10 , 하:+10
//좌우 위치는 Index에서 좌:-1 , 우:+1의 좌표값을 확인하여 save_index.item을 증가시키고 원본 배열의 값도 증가 시킨다.
//그리고 횟수를 증가시킬때 마다 count++를 하여 그 숫자만큼 for문이 돌아가게 하는 구문이다.
const Change = Init_State =>{
    var save_index;
     var count=0;
     const bb=Init_State.length;
     for(var i =0;i<=count;i++){
        Init_State.forEach(function(item,index){ 
            if(item ==i+1)
           {
                save_index={index,item}
               if((save_index.item <=Init_State[save_index.index-10]) && 
                 (save_index.item <=Init_State[save_index.index+10]) && 
                 (save_index.item <=Init_State[save_index.index-1])  && 
                 (save_index.item <=Init_State[save_index.index+1])) 
                  {
                      save_index.item++;
                      Init_State[save_index.index]++;
                      count++;   
                  }
           }
        });
        console.log(Init_State);
}
} 
Change(Init_State);
